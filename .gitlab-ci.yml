# SPDX-FileCopyrightText: 2023 DESY and the Constellation authors
# SPDX-License-Identifier: CC0-1.0

stages:
  - build
  - test
  - lint
  - format
  - docs
  - deploy

# templates

.debian-clang:
  image: gitlab.desy.de:5555/constellation/build-images/debian-clang:latest
  variables:
    CXX: clang++
    CXX_LD: mold

.debian-gcc:
  image: gitlab.desy.de:5555/constellation/build-images/debian-gcc:latest
  variables:
    CXX: g++

.fedora-latest:
  image: gitlab.desy.de:5555/constellation/build-images/fedora-latest:latest
  variables:
    CXX: clang++
    CXX_LD: mold

.ubuntu-22.04:
  image: gitlab.desy.de:5555/constellation/build-images/ubuntu-22.04:latest
  variables:
    CXX: g++

.alma9-cern:
  image: gitlab.desy.de:5555/constellation/build-images/alma9-cern:latest
  variables:
    CXX: clang++
    CXX_LD: lld

.fedora-sphinx:
  image: gitlab.desy.de:5555/constellation/build-images/fedora-sphinx:latest
  variables:
    SPHINX_IMMATERIAL_EXTERNAL_RESOURCE_CACHE_DIR: $CI_PROJECT_DIR/.sphinx_immaterial_cache
  cache:
    key: sphinx-immaterial-cache
    paths:
      - $CI_PROJECT_DIR/.sphinx_immaterial_cache
  before_script:
    - source /venv/bin/activate

.meson-wrap-cache:
  cache:
    key: meson-wrap-cache
    paths:
      - subprojects/packagecache/
      - subprojects/asio-*/
      - subprojects/Catch2-*/
      - subprojects/cppzmq-*/
      - subprojects/libzmq-*/
      - subprojects/magic_enum-*/
      - subprojects/msgpack-cxx-*/
      - subprojects/spdlog-*/

# build stage

.build:
  stage: build
  extends: .meson-wrap-cache
  script:
    - meson setup build -Dimpl_cpp=enabled ${BUILD_OPTIONS}
    - meson compile -C build
  artifacts:
    paths:
      - build
    expire_in: 24 hour

build:debian-clang:
  extends:
    - .build
    - .debian-clang
  variables:
    BUILD_OPTIONS: "-Dbuildtype=debugoptimized -Db_sanitize=address -Db_lundef=false"

build:fedora-latest:
  extends:
    - .build
    - .fedora-latest
  variables:
    BUILD_OPTIONS: "-Dbuildtype=debugoptimized -Db_sanitize=address -Db_lundef=false"

build:debian-gcc:
  extends:
    - .build
    - .debian-gcc
  variables:
    BUILD_OPTIONS: "-Dbuildtype=debug -Db_coverage=true -Dcpp_std=c++23"

build:ubuntu-22.04:
  extends:
    - .build
    - .ubuntu-22.04
  variables:
    BUILD_OPTIONS: "-Dbuildtype=release"

build:alma9-cern:
  extends:
    - .build
    - .alma9-cern
  variables:
    BUILD_OPTIONS: "-Dbuildtype=release -Db_lto=true -Db_lto_mode=thin"

# test stage

.test:
  stage: test
  script:
    - meson test -C build --suite Constellation --no-rebuild --print-errorlogs
  artifacts:
    reports:
      junit: build/meson-logs/testlog.junit.xml

test:debian-clang:
  extends:
    - .test
    - .debian-clang
  needs:
    - job: build:debian-clang
      artifacts: true

test:debian-gcc:
  extends:
    - .test
    - .debian-gcc
  needs:
    - job: build:debian-gcc
      artifacts: true
  artifacts:
    paths:
      - build
    expire_in: 24 hour

test:fedora-latest:
  extends:
    - .test
    - .fedora-latest
  needs:
    - job: build:fedora-latest
      artifacts: true

test:ubuntu-22.04:
  extends:
    - .test
    - .ubuntu-22.04
  needs:
    - job: build:ubuntu-22.04
      artifacts: true

test:alma9-cern:
  extends:
    - .test
    - .alma9-cern
  needs:
    - job: build:alma9-cern
      artifacts: true

# lint stage

.lint:
  stage: lint
  extends: .meson-wrap-cache

lint:clang-tidy:
  extends:
    - .lint
    - .debian-clang
  needs:
    - job: build:debian-clang
      artifacts: true
  script:
    - ninja -C build clang-tidy

lint:coverage:
  extends:
    - .lint
    - .debian-gcc
  needs:
    - job: test:debian-gcc
      artifacts: true
  script:
    - ninja -C build coverage-xml
  coverage: '/^\s*lines:\s*\d+.\d+\%/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: build/meson-logs/coverage.xml

lint:clang-scan-build:
  extends:
    - .lint
    - .debian-clang
  needs:
    - job: build:debian-clang
      artifacts: false
  variables:
    CCC_CC: clang
    CCC_CXX: clang++
  script:
    - meson setup build -Dimpl_cpp=enabled -Dbuildtype=debug
    - ninja -C build scan-build
    - if [ ! -z "$(ls -A build/meson-logs/scanbuild)" ]; then false; fi
  artifacts:
    paths:
      - build/meson-logs/scanbuild
    when: on_failure
    expose_as: 'clang-scan-build'
    expire_in: 1 week

lint:coverity-scan:
  extends:
    - .lint
    - .ubuntu-22.04
  needs:
    - job: build:ubuntu-22.04
      artifacts: false
  script:
    - curl -s https://scan.coverity.com/download/linux64 -o /tmp/cov-analysis-linux64.tgz
        --form project=$COVERITY_SCAN_PROJECT_NAME --form token=$COVERITY_SCAN_TOKEN
    - tar -xzf /tmp/cov-analysis-linux64.tgz
    - rm -r /tmp/cov-analysis-linux64.tgz
    - meson setup build -Dimpl_cpp=enabled -Dbuildtype=debug
    - cov-analysis-linux64-*/bin/cov-build --dir cov-int ninja -C build
    - tar -czf cov-int.tgz cov-int
    - curl -s https://scan.coverity.com/builds?project=$COVERITY_SCAN_PROJECT_NAME
        --form token=$COVERITY_SCAN_TOKEN --form email=$GITLAB_USER_EMAIL
        --form file=@cov-int.tgz --form version="$CI_COMMIT_REF_NAME"
        --form description="$CI_COMMIT_REF_NAME / $CI_COMMIT_SHA / $CI_PIPELINE_ID"
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE=="schedule"

# format stage

.format:
  stage: format
  needs: []

format:clang-format:
  extends:
    - .format
    - .debian-clang
    - .meson-wrap-cache
  script:
    - meson setup build -Dimpl_cpp=enabled
    - ninja -C build clang-format-check

format:reuse:
  extends: .format
  image: registry.cern.ch/docker.io/fsfe/reuse:latest
  script:
    - reuse lint

format:codespell:
  extends:
    - .format
    - .debian-gcc
  script:
    - codespell --ignore-words .ci/codespell_ignored_words.txt --quiet-level 2 --skip ".git,.ci,subprojects,AUTHORS.md"

# docs stage

.docs:
  stage: docs
  needs: []

docs:html:
  extends:
    - .docs
    - .fedora-sphinx
  variables:
    SPHINXOPTS: -W
  script:
    - make -C docs doxygen
    - make -C docs html
  artifacts:
    paths:
      - docs/build
    expire_in: 24 hours

# deploy stage

deploy:docs:
  stage: deploy
  needs:
    - job: docs:html
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  trigger:
    project: constellation/constellation.pages.desy.de
